//------------------------------------------------------------------------------
// <auto-generated>
//     Este c칩digo se gener칩 a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perder치n si
//     el c칩digo se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    public partial class Laboratorio_movimiento: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int Item
        {
            get { return _item; }
            set
            {
                if (_item != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'Item' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _item = value;
                    OnPropertyChanged("Item");
                }
            }
        }
        private int _item;
    
        [DataMember]
        public Nullable<int> CodLab
        {
            get { return _codLab; }
            set
            {
                if (_codLab != value)
                {
                    _codLab = value;
                    OnPropertyChanged("CodLab");
                }
            }
        }
        private Nullable<int> _codLab;
    
        [DataMember]
        public Nullable<int> NroSalaExtraccion
        {
            get { return _nroSalaExtraccion; }
            set
            {
                if (_nroSalaExtraccion != value)
                {
                    _nroSalaExtraccion = value;
                    OnPropertyChanged("NroSalaExtraccion");
                }
            }
        }
        private Nullable<int> _nroSalaExtraccion;
    
        [DataMember]
        public Nullable<int> IdTipoSala
        {
            get { return _idTipoSala; }
            set
            {
                if (_idTipoSala != value)
                {
                    _idTipoSala = value;
                    OnPropertyChanged("IdTipoSala");
                }
            }
        }
        private Nullable<int> _idTipoSala;
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public Nullable<int> CodTipoAnalisis
        {
            get { return _codTipoAnalisis; }
            set
            {
                if (_codTipoAnalisis != value)
                {
                    _codTipoAnalisis = value;
                    OnPropertyChanged("CodTipoAnalisis");
                }
            }
        }
        private Nullable<int> _codTipoAnalisis;
    
        [DataMember]
        public Nullable<System.DateTime> Fecha_de_Extraccion
        {
            get { return _fecha_de_Extraccion; }
            set
            {
                if (_fecha_de_Extraccion != value)
                {
                    _fecha_de_Extraccion = value;
                    OnPropertyChanged("Fecha_de_Extraccion");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_de_Extraccion;
    
        [DataMember]
        public Nullable<System.DateTime> Fecha_analisis
        {
            get { return _fecha_analisis; }
            set
            {
                if (_fecha_analisis != value)
                {
                    _fecha_analisis = value;
                    OnPropertyChanged("Fecha_analisis");
                }
            }
        }
        private Nullable<System.DateTime> _fecha_analisis;
    
        [DataMember]
        public Nullable<int> Nro_de_muestra
        {
            get { return _nro_de_muestra; }
            set
            {
                if (_nro_de_muestra != value)
                {
                    _nro_de_muestra = value;
                    OnPropertyChanged("Nro_de_muestra");
                }
            }
        }
        private Nullable<int> _nro_de_muestra;
    
        [DataMember]
        public string Resultado
        {
            get { return _resultado; }
            set
            {
                if (_resultado != value)
                {
                    _resultado = value;
                    OnPropertyChanged("Resultado");
                }
            }
        }
        private string _resultado;
    
        [DataMember]
        public string unidad
        {
            get { return _unidad; }
            set
            {
                if (_unidad != value)
                {
                    _unidad = value;
                    OnPropertyChanged("unidad");
                }
            }
        }
        private string _unidad;
    
        [DataMember]
        public string Tambor
        {
            get { return _tambor; }
            set
            {
                if (_tambor != value)
                {
                    _tambor = value;
                    OnPropertyChanged("Tambor");
                }
            }
        }
        private string _tambor;
    
        [DataMember]
        public string Lote
        {
            get { return _lote; }
            set
            {
                if (_lote != value)
                {
                    _lote = value;
                    OnPropertyChanged("Lote");
                }
            }
        }
        private string _lote;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
