//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Enfermedades))]
    [KnownType(typeof(Productores))]
    public partial class ManejoColmenar: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ren' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Productores != null && Productores.ren != value)
                        {
                            Productores = null;
                        }
                    }
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public int CodEnfermedad
        {
            get { return _codEnfermedad; }
            set
            {
                if (_codEnfermedad != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'CodEnfermedad' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Enfermedades != null && Enfermedades.CodEnfermedad != value)
                        {
                            Enfermedades = null;
                        }
                    }
                    _codEnfermedad = value;
                    OnPropertyChanged("CodEnfermedad");
                }
            }
        }
        private int _codEnfermedad;
    
        [DataMember]
        public Nullable<bool> Preven
        {
            get { return _preven; }
            set
            {
                if (_preven != value)
                {
                    _preven = value;
                    OnPropertyChanged("Preven");
                }
            }
        }
        private Nullable<bool> _preven;
    
        [DataMember]
        public Nullable<bool> Cura
        {
            get { return _cura; }
            set
            {
                if (_cura != value)
                {
                    _cura = value;
                    OnPropertyChanged("Cura");
                }
            }
        }
        private Nullable<bool> _cura;
    
        [DataMember]
        public Nullable<bool> Otoño
        {
            get { return _otoño; }
            set
            {
                if (_otoño != value)
                {
                    _otoño = value;
                    OnPropertyChanged("Otoño");
                }
            }
        }
        private Nullable<bool> _otoño;
    
        [DataMember]
        public Nullable<bool> Primavera
        {
            get { return _primavera; }
            set
            {
                if (_primavera != value)
                {
                    _primavera = value;
                    OnPropertyChanged("Primavera");
                }
            }
        }
        private Nullable<bool> _primavera;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public Enfermedades Enfermedades
        {
            get { return _enfermedades; }
            set
            {
                if (!ReferenceEquals(_enfermedades, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                        // de lo contrario, solo se puede establecer en una entidad con la clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                        if (CodEnfermedad != value.CodEnfermedad)
                        {
                            throw new InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado de agregado.");
                        }
                    }
                    var previousValue = _enfermedades;
                    _enfermedades = value;
                    FixupEnfermedades(previousValue);
                    OnNavigationPropertyChanged("Enfermedades");
                }
            }
        }
        private Enfermedades _enfermedades;
    
        [DataMember]
        public Productores Productores
        {
            get { return _productores; }
            set
            {
                if (!ReferenceEquals(_productores, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                        // de lo contrario, solo se puede establecer en una entidad con la clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                        if (ren != value.ren)
                        {
                            throw new InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado de agregado.");
                        }
                    }
                    var previousValue = _productores;
                    _productores = value;
                    FixupProductores(previousValue);
                    OnNavigationPropertyChanged("Productores");
                }
            }
        }
        private Productores _productores;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
        // Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Enfermedades = null;
            Productores = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupEnfermedades(Enfermedades previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ManejoColmenar.Contains(this))
            {
                previousValue.ManejoColmenar.Remove(this);
            }
    
            if (Enfermedades != null)
            {
                if (!Enfermedades.ManejoColmenar.Contains(this))
                {
                    Enfermedades.ManejoColmenar.Add(this);
                }
    
                CodEnfermedad = Enfermedades.CodEnfermedad;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Enfermedades")
                    && (ChangeTracker.OriginalValues["Enfermedades"] == Enfermedades))
                {
                    ChangeTracker.OriginalValues.Remove("Enfermedades");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Enfermedades", previousValue);
                }
                if (Enfermedades != null && !Enfermedades.ChangeTracker.ChangeTrackingEnabled)
                {
                    Enfermedades.StartTracking();
                }
            }
        }
    
        private void FixupProductores(Productores previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ManejoColmenar.Contains(this))
            {
                previousValue.ManejoColmenar.Remove(this);
            }
    
            if (Productores != null)
            {
                if (!Productores.ManejoColmenar.Contains(this))
                {
                    Productores.ManejoColmenar.Add(this);
                }
    
                ren = Productores.ren;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Productores")
                    && (ChangeTracker.OriginalValues["Productores"] == Productores))
                {
                    ChangeTracker.OriginalValues.Remove("Productores");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Productores", previousValue);
                }
                if (Productores != null && !Productores.ChangeTracker.ChangeTrackingEnabled)
                {
                    Productores.StartTracking();
                }
            }
        }

        #endregion
    }
}
