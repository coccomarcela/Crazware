//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = false)]
    [KnownType(typeof(ActProductivas))]
    [KnownType(typeof(Apiarios))]
    [KnownType(typeof(FormasComercializacion))]
    [KnownType(typeof(Grupos))]
    [KnownType(typeof(Loc))]
    [KnownType(typeof(ManejoColmenar))]
    [KnownType(typeof(PlanillaCampo))]
    [KnownType(typeof(ProveedoresMatInerte))]
    [KnownType(typeof(Remedios))]
    public partial class Productores: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ren' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public Nullable<System.DateTime> fechains
        {
            get { return _fechains; }
            set
            {
                if (_fechains != value)
                {
                    _fechains = value;
                    OnPropertyChanged("fechains");
                }
            }
        }
        private Nullable<System.DateTime> _fechains;
    
        [DataMember]
        public Nullable<System.DateTime> fechavenc
        {
            get { return _fechavenc; }
            set
            {
                if (_fechavenc != value)
                {
                    _fechavenc = value;
                    OnPropertyChanged("fechavenc");
                }
            }
        }
        private Nullable<System.DateTime> _fechavenc;
    
        [DataMember]
        public string ape
        {
            get { return _ape; }
            set
            {
                if (_ape != value)
                {
                    _ape = value;
                    OnPropertyChanged("ape");
                }
            }
        }
        private string _ape;
    
        [DataMember]
        public string nom
        {
            get { return _nom; }
            set
            {
                if (_nom != value)
                {
                    _nom = value;
                    OnPropertyChanged("nom");
                }
            }
        }
        private string _nom;
    
        [DataMember]
        public Nullable<int> dni
        {
            get { return _dni; }
            set
            {
                if (_dni != value)
                {
                    _dni = value;
                    OnPropertyChanged("dni");
                }
            }
        }
        private Nullable<int> _dni;
    
        [DataMember]
        public string dom
        {
            get { return _dom; }
            set
            {
                if (_dom != value)
                {
                    _dom = value;
                    OnPropertyChanged("dom");
                }
            }
        }
        private string _dom;
    
        [DataMember]
        public string tel
        {
            get { return _tel; }
            set
            {
                if (_tel != value)
                {
                    _tel = value;
                    OnPropertyChanged("tel");
                }
            }
        }
        private string _tel;
    
        [DataMember]
        public string correo
        {
            get { return _correo; }
            set
            {
                if (_correo != value)
                {
                    _correo = value;
                    OnPropertyChanged("correo");
                }
            }
        }
        private string _correo;
    
        [DataMember]
        public Nullable<int> CodLoc
        {
            get { return _codLoc; }
            set
            {
                if (_codLoc != value)
                {
                    ChangeTracker.RecordOriginalValue("CodLoc", _codLoc);
                    if (!IsDeserializing)
                    {
                        if (Loc != null && Loc.CodLoc != value)
                        {
                            Loc = null;
                        }
                    }
                    _codLoc = value;
                    OnPropertyChanged("CodLoc");
                }
            }
        }
        private Nullable<int> _codLoc;
    
        [DataMember]
        public Nullable<bool> TratamientosSanitarios
        {
            get { return _tratamientosSanitarios; }
            set
            {
                if (_tratamientosSanitarios != value)
                {
                    _tratamientosSanitarios = value;
                    OnPropertyChanged("TratamientosSanitarios");
                }
            }
        }
        private Nullable<bool> _tratamientosSanitarios;
    
        [DataMember]
        public string TipoRemedios
        {
            get { return _tipoRemedios; }
            set
            {
                if (_tipoRemedios != value)
                {
                    _tipoRemedios = value;
                    OnPropertyChanged("TipoRemedios");
                }
            }
        }
        private string _tipoRemedios;
    
        [DataMember]
        public Nullable<int> CodGrupo
        {
            get { return _codGrupo; }
            set
            {
                if (_codGrupo != value)
                {
                    ChangeTracker.RecordOriginalValue("CodGrupo", _codGrupo);
                    if (!IsDeserializing)
                    {
                        if (Grupos != null && Grupos.CodGrupo != value)
                        {
                            Grupos = null;
                        }
                    }
                    _codGrupo = value;
                    OnPropertyChanged("CodGrupo");
                }
            }
        }
        private Nullable<int> _codGrupo;
    
        [DataMember]
        public string Cuit
        {
            get { return _cuit; }
            set
            {
                if (_cuit != value)
                {
                    _cuit = value;
                    OnPropertyChanged("Cuit");
                }
            }
        }
        private string _cuit;
    
        [DataMember]
        public string RazonSocial
        {
            get { return _razonSocial; }
            set
            {
                if (_razonSocial != value)
                {
                    _razonSocial = value;
                    OnPropertyChanged("RazonSocial");
                }
            }
        }
        private string _razonSocial;
    
        [DataMember]
        public Nullable<bool> Carnet
        {
            get { return _carnet; }
            set
            {
                if (_carnet != value)
                {
                    _carnet = value;
                    OnPropertyChanged("Carnet");
                }
            }
        }
        private Nullable<bool> _carnet;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<ActProductivas> ActProductivas
        {
            get
            {
                if (_actProductivas == null)
                {
                    _actProductivas = new TrackableCollection<ActProductivas>();
                    _actProductivas.CollectionChanged += FixupActProductivas;
                }
                return _actProductivas;
            }
            set
            {
                if (!ReferenceEquals(_actProductivas, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_actProductivas != null)
                    {
                        _actProductivas.CollectionChanged -= FixupActProductivas;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Quitar el controlador de eventos de eliminación en cascada para aquellas entidades de la colección actual.
                        foreach (ActProductivas item in _actProductivas)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _actProductivas = value;
                    if (_actProductivas != null)
                    {
                        _actProductivas.CollectionChanged += FixupActProductivas;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                        foreach (ActProductivas item in _actProductivas)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ActProductivas");
                }
            }
        }
        private TrackableCollection<ActProductivas> _actProductivas;
    
        [DataMember]
        internal TrackableCollection<Apiarios> Apiarios
        {
            get
            {
                if (_apiarios == null)
                {
                    _apiarios = new TrackableCollection<Apiarios>();
                    _apiarios.CollectionChanged += FixupApiarios;
                }
                return _apiarios;
            }
            set
            {
                if (!ReferenceEquals(_apiarios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_apiarios != null)
                    {
                        _apiarios.CollectionChanged -= FixupApiarios;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Quitar el controlador de eventos de eliminación en cascada para aquellas entidades de la colección actual.
                        foreach (Apiarios item in _apiarios)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _apiarios = value;
                    if (_apiarios != null)
                    {
                        _apiarios.CollectionChanged += FixupApiarios;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                        foreach (Apiarios item in _apiarios)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Apiarios");
                }
            }
        }
        private TrackableCollection<Apiarios> _apiarios;
    
        [DataMember]
        internal TrackableCollection<FormasComercializacion> FormasComercializacion
        {
            get
            {
                if (_formasComercializacion == null)
                {
                    _formasComercializacion = new TrackableCollection<FormasComercializacion>();
                    _formasComercializacion.CollectionChanged += FixupFormasComercializacion;
                }
                return _formasComercializacion;
            }
            set
            {
                if (!ReferenceEquals(_formasComercializacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_formasComercializacion != null)
                    {
                        _formasComercializacion.CollectionChanged -= FixupFormasComercializacion;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Quitar el controlador de eventos de eliminación en cascada para aquellas entidades de la colección actual.
                        foreach (FormasComercializacion item in _formasComercializacion)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _formasComercializacion = value;
                    if (_formasComercializacion != null)
                    {
                        _formasComercializacion.CollectionChanged += FixupFormasComercializacion;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                        foreach (FormasComercializacion item in _formasComercializacion)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("FormasComercializacion");
                }
            }
        }
        private TrackableCollection<FormasComercializacion> _formasComercializacion;
    
        [DataMember]
        public Grupos Grupos
        {
            get { return _grupos; }
            set
            {
                if (!ReferenceEquals(_grupos, value))
                {
                    var previousValue = _grupos;
                    _grupos = value;
                    FixupGrupos(previousValue);
                    OnNavigationPropertyChanged("Grupos");
                }
            }
        }
        private Grupos _grupos;
    
        [DataMember]
        public Loc Loc
        {
            get { return _loc; }
            set
            {
                if (!ReferenceEquals(_loc, value))
                {
                    var previousValue = _loc;
                    _loc = value;
                    FixupLoc(previousValue);
                    OnNavigationPropertyChanged("Loc");
                }
            }
        }
        private Loc _loc;
    
        [DataMember]
        internal TrackableCollection<ManejoColmenar> ManejoColmenar
        {
            get
            {
                if (_manejoColmenar == null)
                {
                    _manejoColmenar = new TrackableCollection<ManejoColmenar>();
                    _manejoColmenar.CollectionChanged += FixupManejoColmenar;
                }
                return _manejoColmenar;
            }
            set
            {
                if (!ReferenceEquals(_manejoColmenar, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_manejoColmenar != null)
                    {
                        _manejoColmenar.CollectionChanged -= FixupManejoColmenar;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Quitar el controlador de eventos de eliminación en cascada para aquellas entidades de la colección actual.
                        foreach (ManejoColmenar item in _manejoColmenar)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _manejoColmenar = value;
                    if (_manejoColmenar != null)
                    {
                        _manejoColmenar.CollectionChanged += FixupManejoColmenar;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                        foreach (ManejoColmenar item in _manejoColmenar)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ManejoColmenar");
                }
            }
        }
        private TrackableCollection<ManejoColmenar> _manejoColmenar;
    
        [DataMember]
        internal TrackableCollection<PlanillaCampo> PlanillaCampo
        {
            get
            {
                if (_planillaCampo == null)
                {
                    _planillaCampo = new TrackableCollection<PlanillaCampo>();
                    _planillaCampo.CollectionChanged += FixupPlanillaCampo;
                }
                return _planillaCampo;
            }
            set
            {
                if (!ReferenceEquals(_planillaCampo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_planillaCampo != null)
                    {
                        _planillaCampo.CollectionChanged -= FixupPlanillaCampo;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Quitar el controlador de eventos de eliminación en cascada para aquellas entidades de la colección actual.
                        foreach (PlanillaCampo item in _planillaCampo)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _planillaCampo = value;
                    if (_planillaCampo != null)
                    {
                        _planillaCampo.CollectionChanged += FixupPlanillaCampo;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                        foreach (PlanillaCampo item in _planillaCampo)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("PlanillaCampo");
                }
            }
        }
        private TrackableCollection<PlanillaCampo> _planillaCampo;
    
        [DataMember]
        internal TrackableCollection<ProveedoresMatInerte> ProveedoresMatInerte
        {
            get
            {
                if (_proveedoresMatInerte == null)
                {
                    _proveedoresMatInerte = new TrackableCollection<ProveedoresMatInerte>();
                    _proveedoresMatInerte.CollectionChanged += FixupProveedoresMatInerte;
                }
                return _proveedoresMatInerte;
            }
            set
            {
                if (!ReferenceEquals(_proveedoresMatInerte, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_proveedoresMatInerte != null)
                    {
                        _proveedoresMatInerte.CollectionChanged -= FixupProveedoresMatInerte;
                    }
                    _proveedoresMatInerte = value;
                    if (_proveedoresMatInerte != null)
                    {
                        _proveedoresMatInerte.CollectionChanged += FixupProveedoresMatInerte;
                    }
                    OnNavigationPropertyChanged("ProveedoresMatInerte");
                }
            }
        }
        private TrackableCollection<ProveedoresMatInerte> _proveedoresMatInerte;
    
        [DataMember]
        internal TrackableCollection<Remedios> Remedios
        {
            get
            {
                if (_remedios == null)
                {
                    _remedios = new TrackableCollection<Remedios>();
                    _remedios.CollectionChanged += FixupRemedios;
                }
                return _remedios;
            }
            set
            {
                if (!ReferenceEquals(_remedios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_remedios != null)
                    {
                        _remedios.CollectionChanged -= FixupRemedios;
                    }
                    _remedios = value;
                    if (_remedios != null)
                    {
                        _remedios.CollectionChanged += FixupRemedios;
                    }
                    OnNavigationPropertyChanged("Remedios");
                }
            }
        }
        private TrackableCollection<Remedios> _remedios;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ActProductivas.Clear();
            Apiarios.Clear();
            FormasComercializacion.Clear();
            Grupos = null;
            Loc = null;
            ManejoColmenar.Clear();
            PlanillaCampo.Clear();
            ProveedoresMatInerte.Clear();
            Remedios.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupGrupos(Grupos previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Productores.Contains(this))
            {
                previousValue.Productores.Remove(this);
            }
    
            if (Grupos != null)
            {
                if (!Grupos.Productores.Contains(this))
                {
                    Grupos.Productores.Add(this);
                }
    
                CodGrupo = Grupos.CodGrupo;
            }
            else if (!skipKeys)
            {
                CodGrupo = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Grupos")
                    && (ChangeTracker.OriginalValues["Grupos"] == Grupos))
                {
                    ChangeTracker.OriginalValues.Remove("Grupos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Grupos", previousValue);
                }
                if (Grupos != null && !Grupos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Grupos.StartTracking();
                }
            }
        }
    
        private void FixupLoc(Loc previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Productores.Contains(this))
            {
                previousValue.Productores.Remove(this);
            }
    
            if (Loc != null)
            {
                if (!Loc.Productores.Contains(this))
                {
                    Loc.Productores.Add(this);
                }
    
                CodLoc = Loc.CodLoc;
            }
            else if (!skipKeys)
            {
                CodLoc = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Loc")
                    && (ChangeTracker.OriginalValues["Loc"] == Loc))
                {
                    ChangeTracker.OriginalValues.Remove("Loc");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Loc", previousValue);
                }
                if (Loc != null && !Loc.ChangeTracker.ChangeTrackingEnabled)
                {
                    Loc.StartTracking();
                }
            }
        }
    
        private void FixupActProductivas(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ActProductivas item in e.NewItems)
                {
                    item.Productores = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ActProductivas", item);
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ActProductivas item in e.OldItems)
                {
                    if (ReferenceEquals(item.Productores, this))
                    {
                        item.Productores = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ActProductivas", item);
                        // Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                        // permite que la relación se modifique sin eliminar el elemento dependiente.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Quitar el extremo dependiente anterior de la escucha de eventos.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupApiarios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Apiarios item in e.NewItems)
                {
                    item.Productores = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Apiarios", item);
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Apiarios item in e.OldItems)
                {
                    if (ReferenceEquals(item.Productores, this))
                    {
                        item.Productores = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Apiarios", item);
                        // Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                        // permite que la relación se modifique sin eliminar el elemento dependiente.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Quitar el extremo dependiente anterior de la escucha de eventos.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupFormasComercializacion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FormasComercializacion item in e.NewItems)
                {
                    item.Productores = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FormasComercializacion", item);
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FormasComercializacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Productores, this))
                    {
                        item.Productores = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FormasComercializacion", item);
                        // Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                        // permite que la relación se modifique sin eliminar el elemento dependiente.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Quitar el extremo dependiente anterior de la escucha de eventos.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupManejoColmenar(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ManejoColmenar item in e.NewItems)
                {
                    item.Productores = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ManejoColmenar", item);
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ManejoColmenar item in e.OldItems)
                {
                    if (ReferenceEquals(item.Productores, this))
                    {
                        item.Productores = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ManejoColmenar", item);
                        // Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                        // permite que la relación se modifique sin eliminar el elemento dependiente.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Quitar el extremo dependiente anterior de la escucha de eventos.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupPlanillaCampo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (PlanillaCampo item in e.NewItems)
                {
                    item.Productores = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("PlanillaCampo", item);
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PlanillaCampo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Productores, this))
                    {
                        item.Productores = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("PlanillaCampo", item);
                        // Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                        // permite que la relación se modifique sin eliminar el elemento dependiente.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Quitar el extremo dependiente anterior de la escucha de eventos.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupProveedoresMatInerte(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProveedoresMatInerte item in e.NewItems)
                {
                    item.Productores = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProveedoresMatInerte", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProveedoresMatInerte item in e.OldItems)
                {
                    if (ReferenceEquals(item.Productores, this))
                    {
                        item.Productores = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProveedoresMatInerte", item);
                    }
                }
            }
        }
    
        private void FixupRemedios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Remedios item in e.NewItems)
                {
                    if (!item.Productores.Contains(this))
                    {
                        item.Productores.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Remedios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Remedios item in e.OldItems)
                {
                    if (item.Productores.Contains(this))
                    {
                        item.Productores.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Remedios", item);
                    }
                }
            }
        }

        #endregion
    }
}
