//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    public partial class MovSalasExtraccionDet: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int NroSalaExtraccion
        {
            get { return _nroSalaExtraccion; }
            set
            {
                if (_nroSalaExtraccion != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'NroSalaExtraccion' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _nroSalaExtraccion = value;
                    OnPropertyChanged("NroSalaExtraccion");
                }
            }
        }
        private int _nroSalaExtraccion;
    
        [DataMember]
        public int Año
        {
            get { return _año; }
            set
            {
                if (_año != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'Año' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _año = value;
                    OnPropertyChanged("Año");
                }
            }
        }
        private int _año;
    
        [DataMember]
        public int Mes
        {
            get { return _mes; }
            set
            {
                if (_mes != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'Mes' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _mes = value;
                    OnPropertyChanged("Mes");
                }
            }
        }
        private int _mes;
    
        [DataMember]
        public int SENroItem
        {
            get { return _sENroItem; }
            set
            {
                if (_sENroItem != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'SENroItem' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _sENroItem = value;
                    OnPropertyChanged("SENroItem");
                }
            }
        }
        private int _sENroItem;
    
        [DataMember]
        public int IdTipoSala
        {
            get { return _idTipoSala; }
            set
            {
                if (_idTipoSala != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'IdTipoSala' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _idTipoSala = value;
                    OnPropertyChanged("IdTipoSala");
                }
            }
        }
        private int _idTipoSala;
    
        [DataMember]
        public Nullable<System.DateTime> Fecha
        {
            get { return _fecha; }
            set
            {
                if (_fecha != value)
                {
                    _fecha = value;
                    OnPropertyChanged("Fecha");
                }
            }
        }
        private Nullable<System.DateTime> _fecha;
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public Nullable<int> MediaAlzas
        {
            get { return _mediaAlzas; }
            set
            {
                if (_mediaAlzas != value)
                {
                    _mediaAlzas = value;
                    OnPropertyChanged("MediaAlzas");
                }
            }
        }
        private Nullable<int> _mediaAlzas;
    
        [DataMember]
        public Nullable<int> CodProd
        {
            get { return _codProd; }
            set
            {
                if (_codProd != value)
                {
                    _codProd = value;
                    OnPropertyChanged("CodProd");
                }
            }
        }
        private Nullable<int> _codProd;
    
        [DataMember]
        public Nullable<double> KiloObtenido
        {
            get { return _kiloObtenido; }
            set
            {
                if (_kiloObtenido != value)
                {
                    _kiloObtenido = value;
                    OnPropertyChanged("KiloObtenido");
                }
            }
        }
        private Nullable<double> _kiloObtenido;
    
        [DataMember]
        public Nullable<int> NumAlzas
        {
            get { return _numAlzas; }
            set
            {
                if (_numAlzas != value)
                {
                    _numAlzas = value;
                    OnPropertyChanged("NumAlzas");
                }
            }
        }
        private Nullable<int> _numAlzas;
    
        [DataMember]
        public Nullable<double> SEPresentacion
        {
            get { return _sEPresentacion; }
            set
            {
                if (_sEPresentacion != value)
                {
                    _sEPresentacion = value;
                    OnPropertyChanged("SEPresentacion");
                }
            }
        }
        private Nullable<double> _sEPresentacion;
    
        [DataMember]
        public Nullable<int> SECantEnvases
        {
            get { return _sECantEnvases; }
            set
            {
                if (_sECantEnvases != value)
                {
                    _sECantEnvases = value;
                    OnPropertyChanged("SECantEnvases");
                }
            }
        }
        private Nullable<int> _sECantEnvases;
    
        [DataMember]
        public Nullable<double> SEtotalKgs
        {
            get { return _sEtotalKgs; }
            set
            {
                if (_sEtotalKgs != value)
                {
                    _sEtotalKgs = value;
                    OnPropertyChanged("SEtotalKgs");
                }
            }
        }
        private Nullable<double> _sEtotalKgs;
    
        [DataMember]
        public string SENroLote
        {
            get { return _sENroLote; }
            set
            {
                if (_sENroLote != value)
                {
                    _sENroLote = value;
                    OnPropertyChanged("SENroLote");
                }
            }
        }
        private string _sENroLote;
    
        [DataMember]
        public string SEDocAmparo
        {
            get { return _sEDocAmparo; }
            set
            {
                if (_sEDocAmparo != value)
                {
                    _sEDocAmparo = value;
                    OnPropertyChanged("SEDocAmparo");
                }
            }
        }
        private string _sEDocAmparo;
    
        [DataMember]
        public Nullable<int> CodComprador
        {
            get { return _codComprador; }
            set
            {
                if (_codComprador != value)
                {
                    _codComprador = value;
                    OnPropertyChanged("CodComprador");
                }
            }
        }
        private Nullable<int> _codComprador;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion
    }
}
