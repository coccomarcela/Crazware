//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SalasExtracción))]
    public partial class MovSalasExtraccion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int NroSalaExtraccion
        {
            get { return _nroSalaExtraccion; }
            set
            {
                if (_nroSalaExtraccion != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'NroSalaExtraccion' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (SalasExtracción != null && SalasExtracción.NroSalaExtraccion != value)
                        {
                            SalasExtracción = null;
                        }
                    }
                    _nroSalaExtraccion = value;
                    OnPropertyChanged("NroSalaExtraccion");
                }
            }
        }
        private int _nroSalaExtraccion;
    
        [DataMember]
        public int Año
        {
            get { return _año; }
            set
            {
                if (_año != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'Año' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _año = value;
                    OnPropertyChanged("Año");
                }
            }
        }
        private int _año;
    
        [DataMember]
        public int Mes
        {
            get { return _mes; }
            set
            {
                if (_mes != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'Mes' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _mes = value;
                    OnPropertyChanged("Mes");
                }
            }
        }
        private int _mes;
    
        [DataMember]
        public int IdTipoSala
        {
            get { return _idTipoSala; }
            set
            {
                if (_idTipoSala != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'IdTipoSala' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (SalasExtracción != null && SalasExtracción.IdTipoSala != value)
                        {
                            SalasExtracción = null;
                        }
                    }
                    _idTipoSala = value;
                    OnPropertyChanged("IdTipoSala");
                }
            }
        }
        private int _idTipoSala;
    
        [DataMember]
        public string MovSObs
        {
            get { return _movSObs; }
            set
            {
                if (_movSObs != value)
                {
                    _movSObs = value;
                    OnPropertyChanged("MovSObs");
                }
            }
        }
        private string _movSObs;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public SalasExtracción SalasExtracción
        {
            get { return _salasExtracción; }
            set
            {
                if (!ReferenceEquals(_salasExtracción, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                        // de lo contrario, solo se puede establecer en una entidad con la clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                        if (NroSalaExtraccion != value.NroSalaExtraccion || IdTipoSala != value.IdTipoSala)
                        {
                            throw new InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado de agregado.");
                        }
                    }
                    var previousValue = _salasExtracción;
                    _salasExtracción = value;
                    FixupSalasExtracción(previousValue);
                    OnNavigationPropertyChanged("SalasExtracción");
                }
            }
        }
        private SalasExtracción _salasExtracción;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
        // Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SalasExtracción = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupSalasExtracción(SalasExtracción previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.MovSalasExtraccion.Contains(this))
            {
                previousValue.MovSalasExtraccion.Remove(this);
            }
    
            if (SalasExtracción != null)
            {
                if (!SalasExtracción.MovSalasExtraccion.Contains(this))
                {
                    SalasExtracción.MovSalasExtraccion.Add(this);
                }
    
                NroSalaExtraccion = SalasExtracción.NroSalaExtraccion;
                IdTipoSala = SalasExtracción.IdTipoSala;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SalasExtracción")
                    && (ChangeTracker.OriginalValues["SalasExtracción"] == SalasExtracción))
                {
                    ChangeTracker.OriginalValues.Remove("SalasExtracción");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SalasExtracción", previousValue);
                }
                if (SalasExtracción != null && !SalasExtracción.ChangeTracker.ChangeTrackingEnabled)
                {
                    SalasExtracción.StartTracking();
                }
            }
        }

        #endregion
    }
}
