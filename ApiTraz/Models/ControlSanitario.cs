//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AsesorTecnico))]
    [KnownType(typeof(ProveedoresMatVivo))]
    public partial class ControlSanitario: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int IdControl
        {
            get { return _idControl; }
            set
            {
                if (_idControl != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'IdControl' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _idControl = value;
                    OnPropertyChanged("IdControl");
                }
            }
        }
        private int _idControl;
    
        [DataMember]
        public Nullable<int> NroRegistroVivo
        {
            get { return _nroRegistroVivo; }
            set
            {
                if (_nroRegistroVivo != value)
                {
                    ChangeTracker.RecordOriginalValue("NroRegistroVivo", _nroRegistroVivo);
                    if (!IsDeserializing)
                    {
                        if (ProveedoresMatVivo != null && ProveedoresMatVivo.NroRegistroVivo != value)
                        {
                            ProveedoresMatVivo = null;
                        }
                    }
                    _nroRegistroVivo = value;
                    OnPropertyChanged("NroRegistroVivo");
                }
            }
        }
        private Nullable<int> _nroRegistroVivo;
    
        [DataMember]
        public Nullable<int> IdTecnico
        {
            get { return _idTecnico; }
            set
            {
                if (_idTecnico != value)
                {
                    ChangeTracker.RecordOriginalValue("IdTecnico", _idTecnico);
                    if (!IsDeserializing)
                    {
                        if (AsesorTecnico != null && AsesorTecnico.IdTecnico != value)
                        {
                            AsesorTecnico = null;
                        }
                    }
                    _idTecnico = value;
                    OnPropertyChanged("IdTecnico");
                }
            }
        }
        private Nullable<int> _idTecnico;
    
        [DataMember]
        public Nullable<System.DateTime> ControSfecha
        {
            get { return _controSfecha; }
            set
            {
                if (_controSfecha != value)
                {
                    _controSfecha = value;
                    OnPropertyChanged("ControSfecha");
                }
            }
        }
        private Nullable<System.DateTime> _controSfecha;
    
        [DataMember]
        public string ControlSobs
        {
            get { return _controlSobs; }
            set
            {
                if (_controlSobs != value)
                {
                    _controlSobs = value;
                    OnPropertyChanged("ControlSobs");
                }
            }
        }
        private string _controlSobs;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public AsesorTecnico AsesorTecnico
        {
            get { return _asesorTecnico; }
            set
            {
                if (!ReferenceEquals(_asesorTecnico, value))
                {
                    var previousValue = _asesorTecnico;
                    _asesorTecnico = value;
                    FixupAsesorTecnico(previousValue);
                    OnNavigationPropertyChanged("AsesorTecnico");
                }
            }
        }
        private AsesorTecnico _asesorTecnico;
    
        [DataMember]
        public ProveedoresMatVivo ProveedoresMatVivo
        {
            get { return _proveedoresMatVivo; }
            set
            {
                if (!ReferenceEquals(_proveedoresMatVivo, value))
                {
                    var previousValue = _proveedoresMatVivo;
                    _proveedoresMatVivo = value;
                    FixupProveedoresMatVivo(previousValue);
                    OnNavigationPropertyChanged("ProveedoresMatVivo");
                }
            }
        }
        private ProveedoresMatVivo _proveedoresMatVivo;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AsesorTecnico = null;
            ProveedoresMatVivo = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupAsesorTecnico(AsesorTecnico previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ControlSanitario.Contains(this))
            {
                previousValue.ControlSanitario.Remove(this);
            }
    
            if (AsesorTecnico != null)
            {
                if (!AsesorTecnico.ControlSanitario.Contains(this))
                {
                    AsesorTecnico.ControlSanitario.Add(this);
                }
    
                IdTecnico = AsesorTecnico.IdTecnico;
            }
            else if (!skipKeys)
            {
                IdTecnico = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AsesorTecnico")
                    && (ChangeTracker.OriginalValues["AsesorTecnico"] == AsesorTecnico))
                {
                    ChangeTracker.OriginalValues.Remove("AsesorTecnico");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AsesorTecnico", previousValue);
                }
                if (AsesorTecnico != null && !AsesorTecnico.ChangeTracker.ChangeTrackingEnabled)
                {
                    AsesorTecnico.StartTracking();
                }
            }
        }
    
        private void FixupProveedoresMatVivo(ProveedoresMatVivo previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ControlSanitario.Contains(this))
            {
                previousValue.ControlSanitario.Remove(this);
            }
    
            if (ProveedoresMatVivo != null)
            {
                if (!ProveedoresMatVivo.ControlSanitario.Contains(this))
                {
                    ProveedoresMatVivo.ControlSanitario.Add(this);
                }
    
                NroRegistroVivo = ProveedoresMatVivo.NroRegistroVivo;
            }
            else if (!skipKeys)
            {
                NroRegistroVivo = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ProveedoresMatVivo")
                    && (ChangeTracker.OriginalValues["ProveedoresMatVivo"] == ProveedoresMatVivo))
                {
                    ChangeTracker.OriginalValues.Remove("ProveedoresMatVivo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ProveedoresMatVivo", previousValue);
                }
                if (ProveedoresMatVivo != null && !ProveedoresMatVivo.ChangeTracker.ChangeTrackingEnabled)
                {
                    ProveedoresMatVivo.StartTracking();
                }
            }
        }

        #endregion
    }
}
