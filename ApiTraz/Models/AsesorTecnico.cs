//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ControlSanitario))]
    public partial class AsesorTecnico: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int IdTecnico
        {
            get { return _idTecnico; }
            set
            {
                if (_idTecnico != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'IdTecnico' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _idTecnico = value;
                    OnPropertyChanged("IdTecnico");
                }
            }
        }
        private int _idTecnico;
    
        [DataMember]
        public string TecNom
        {
            get { return _tecNom; }
            set
            {
                if (_tecNom != value)
                {
                    _tecNom = value;
                    OnPropertyChanged("TecNom");
                }
            }
        }
        private string _tecNom;
    
        [DataMember]
        public string TecOrg
        {
            get { return _tecOrg; }
            set
            {
                if (_tecOrg != value)
                {
                    _tecOrg = value;
                    OnPropertyChanged("TecOrg");
                }
            }
        }
        private string _tecOrg;
    
        [DataMember]
        public string TecTel
        {
            get { return _tecTel; }
            set
            {
                if (_tecTel != value)
                {
                    _tecTel = value;
                    OnPropertyChanged("TecTel");
                }
            }
        }
        private string _tecTel;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<ControlSanitario> ControlSanitario
        {
            get
            {
                if (_controlSanitario == null)
                {
                    _controlSanitario = new TrackableCollection<ControlSanitario>();
                    _controlSanitario.CollectionChanged += FixupControlSanitario;
                }
                return _controlSanitario;
            }
            set
            {
                if (!ReferenceEquals(_controlSanitario, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_controlSanitario != null)
                    {
                        _controlSanitario.CollectionChanged -= FixupControlSanitario;
                    }
                    _controlSanitario = value;
                    if (_controlSanitario != null)
                    {
                        _controlSanitario.CollectionChanged += FixupControlSanitario;
                    }
                    OnNavigationPropertyChanged("ControlSanitario");
                }
            }
        }
        private TrackableCollection<ControlSanitario> _controlSanitario;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ControlSanitario.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupControlSanitario(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ControlSanitario item in e.NewItems)
                {
                    item.AsesorTecnico = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ControlSanitario", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ControlSanitario item in e.OldItems)
                {
                    if (ReferenceEquals(item.AsesorTecnico, this))
                    {
                        item.AsesorTecnico = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ControlSanitario", item);
                    }
                }
            }
        }

        #endregion
    }
}
