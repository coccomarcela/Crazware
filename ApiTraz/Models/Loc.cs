//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Apiarios))]
    [KnownType(typeof(Dptos))]
    [KnownType(typeof(Grupos))]
    [KnownType(typeof(Productores))]
    [KnownType(typeof(SalasExtraccion))]
    [KnownType(typeof(SalasProcFracc))]
    public partial class Loc: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int CodLoc
        {
            get { return _codLoc; }
            set
            {
                if (_codLoc != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'CodLoc' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _codLoc = value;
                    OnPropertyChanged("CodLoc");
                }
            }
        }
        private int _codLoc;
    
        [DataMember]
        public string Loc1
        {
            get { return _loc1; }
            set
            {
                if (_loc1 != value)
                {
                    _loc1 = value;
                    OnPropertyChanged("Loc1");
                }
            }
        }
        private string _loc1;
    
        [DataMember]
        public Nullable<int> CodDpto
        {
            get { return _codDpto; }
            set
            {
                if (_codDpto != value)
                {
                    ChangeTracker.RecordOriginalValue("CodDpto", _codDpto);
                    if (!IsDeserializing)
                    {
                        if (Dptos != null && Dptos.CodDpto != value)
                        {
                            Dptos = null;
                        }
                    }
                    _codDpto = value;
                    OnPropertyChanged("CodDpto");
                }
            }
        }
        private Nullable<int> _codDpto;
    
        [DataMember]
        public string codpos
        {
            get { return _codpos; }
            set
            {
                if (_codpos != value)
                {
                    _codpos = value;
                    OnPropertyChanged("codpos");
                }
            }
        }
        private string _codpos;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<Apiarios> Apiarios
        {
            get
            {
                if (_apiarios == null)
                {
                    _apiarios = new TrackableCollection<Apiarios>();
                    _apiarios.CollectionChanged += FixupApiarios;
                }
                return _apiarios;
            }
            set
            {
                if (!ReferenceEquals(_apiarios, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_apiarios != null)
                    {
                        _apiarios.CollectionChanged -= FixupApiarios;
                    }
                    _apiarios = value;
                    if (_apiarios != null)
                    {
                        _apiarios.CollectionChanged += FixupApiarios;
                    }
                    OnNavigationPropertyChanged("Apiarios");
                }
            }
        }
        private TrackableCollection<Apiarios> _apiarios;
    
        [DataMember]
        public Dptos Dptos
        {
            get { return _dptos; }
            set
            {
                if (!ReferenceEquals(_dptos, value))
                {
                    var previousValue = _dptos;
                    _dptos = value;
                    FixupDptos(previousValue);
                    OnNavigationPropertyChanged("Dptos");
                }
            }
        }
        private Dptos _dptos;
    
        [DataMember]
        public TrackableCollection<Grupos> Grupos
        {
            get
            {
                if (_grupos == null)
                {
                    _grupos = new TrackableCollection<Grupos>();
                    _grupos.CollectionChanged += FixupGrupos;
                }
                return _grupos;
            }
            set
            {
                if (!ReferenceEquals(_grupos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_grupos != null)
                    {
                        _grupos.CollectionChanged -= FixupGrupos;
                    }
                    _grupos = value;
                    if (_grupos != null)
                    {
                        _grupos.CollectionChanged += FixupGrupos;
                    }
                    OnNavigationPropertyChanged("Grupos");
                }
            }
        }
        private TrackableCollection<Grupos> _grupos;
    
        [DataMember]
        public TrackableCollection<Productores> Productores
        {
            get
            {
                if (_productores == null)
                {
                    _productores = new TrackableCollection<Productores>();
                    _productores.CollectionChanged += FixupProductores;
                }
                return _productores;
            }
            set
            {
                if (!ReferenceEquals(_productores, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_productores != null)
                    {
                        _productores.CollectionChanged -= FixupProductores;
                    }
                    _productores = value;
                    if (_productores != null)
                    {
                        _productores.CollectionChanged += FixupProductores;
                    }
                    OnNavigationPropertyChanged("Productores");
                }
            }
        }
        private TrackableCollection<Productores> _productores;
    
        [DataMember]
        public TrackableCollection<SalasExtraccion> SalasExtracción
        {
            get
            {
                if (_salasExtracción == null)
                {
                    _salasExtracción = new TrackableCollection<SalasExtraccion>();
                    _salasExtracción.CollectionChanged += FixupSalasExtracción;
                }
                return _salasExtracción;
            }
            set
            {
                if (!ReferenceEquals(_salasExtracción, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_salasExtracción != null)
                    {
                        _salasExtracción.CollectionChanged -= FixupSalasExtracción;
                    }
                    _salasExtracción = value;
                    if (_salasExtracción != null)
                    {
                        _salasExtracción.CollectionChanged += FixupSalasExtracción;
                    }
                    OnNavigationPropertyChanged("SalasExtracción");
                }
            }
        }
        private TrackableCollection<SalasExtraccion> _salasExtracción;
    
        [DataMember]
        public TrackableCollection<SalasProcFracc> SalasProcFracc
        {
            get
            {
                if (_salasProcFracc == null)
                {
                    _salasProcFracc = new TrackableCollection<SalasProcFracc>();
                    _salasProcFracc.CollectionChanged += FixupSalasProcFracc;
                }
                return _salasProcFracc;
            }
            set
            {
                if (!ReferenceEquals(_salasProcFracc, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_salasProcFracc != null)
                    {
                        _salasProcFracc.CollectionChanged -= FixupSalasProcFracc;
                    }
                    _salasProcFracc = value;
                    if (_salasProcFracc != null)
                    {
                        _salasProcFracc.CollectionChanged += FixupSalasProcFracc;
                    }
                    OnNavigationPropertyChanged("SalasProcFracc");
                }
            }
        }
        private TrackableCollection<SalasProcFracc> _salasProcFracc;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Apiarios.Clear();
            Dptos = null;
            Grupos.Clear();
            Productores.Clear();
            SalasExtracción.Clear();
            SalasProcFracc.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupDptos(Dptos previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Loc.Contains(this))
            {
                previousValue.Loc.Remove(this);
            }
    
            if (Dptos != null)
            {
                if (!Dptos.Loc.Contains(this))
                {
                    Dptos.Loc.Add(this);
                }
    
                CodDpto = Dptos.CodDpto;
            }
            else if (!skipKeys)
            {
                CodDpto = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Dptos")
                    && (ChangeTracker.OriginalValues["Dptos"] == Dptos))
                {
                    ChangeTracker.OriginalValues.Remove("Dptos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Dptos", previousValue);
                }
                if (Dptos != null && !Dptos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Dptos.StartTracking();
                }
            }
        }
    
        private void FixupApiarios(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Apiarios item in e.NewItems)
                {
                    item.Loc = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Apiarios", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Apiarios item in e.OldItems)
                {
                    if (ReferenceEquals(item.Loc, this))
                    {
                        item.Loc = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Apiarios", item);
                    }
                }
            }
        }
    
        private void FixupGrupos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Grupos item in e.NewItems)
                {
                    item.Loc = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Grupos", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Grupos item in e.OldItems)
                {
                    if (ReferenceEquals(item.Loc, this))
                    {
                        item.Loc = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Grupos", item);
                    }
                }
            }
        }
    
        private void FixupProductores(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Productores item in e.NewItems)
                {
                    item.Loc = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Productores", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Productores item in e.OldItems)
                {
                    if (ReferenceEquals(item.Loc, this))
                    {
                        item.Loc = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Productores", item);
                    }
                }
            }
        }
    
        private void FixupSalasExtracción(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SalasExtraccion item in e.NewItems)
                {
                    item.Loc = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SalasExtracción", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalasExtraccion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Loc, this))
                    {
                        item.Loc = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SalasExtracción", item);
                    }
                }
            }
        }
    
        private void FixupSalasProcFracc(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SalasProcFracc item in e.NewItems)
                {
                    item.Loc = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SalasProcFracc", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalasProcFracc item in e.OldItems)
                {
                    if (ReferenceEquals(item.Loc, this))
                    {
                        item.Loc = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SalasProcFracc", item);
                    }
                }
            }
        }

        #endregion
    }
}
