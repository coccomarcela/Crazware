//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Productores))]
    [KnownType(typeof(Productos))]
    public partial class ProveedoresMatInerte: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int NroRegistroInerte
        {
            get { return _nroRegistroInerte; }
            set
            {
                if (_nroRegistroInerte != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'NroRegistroInerte' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _nroRegistroInerte = value;
                    OnPropertyChanged("NroRegistroInerte");
                }
            }
        }
        private int _nroRegistroInerte;
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    ChangeTracker.RecordOriginalValue("ren", _ren);
                    if (!IsDeserializing)
                    {
                        if (Productores != null && Productores.ren != value)
                        {
                            Productores = null;
                        }
                    }
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public string ProvApeIn
        {
            get { return _provApeIn; }
            set
            {
                if (_provApeIn != value)
                {
                    _provApeIn = value;
                    OnPropertyChanged("ProvApeIn");
                }
            }
        }
        private string _provApeIn;
    
        [DataMember]
        public string ProvNomIn
        {
            get { return _provNomIn; }
            set
            {
                if (_provNomIn != value)
                {
                    _provNomIn = value;
                    OnPropertyChanged("ProvNomIn");
                }
            }
        }
        private string _provNomIn;
    
        [DataMember]
        public string ProvDomIn
        {
            get { return _provDomIn; }
            set
            {
                if (_provDomIn != value)
                {
                    _provDomIn = value;
                    OnPropertyChanged("ProvDomIn");
                }
            }
        }
        private string _provDomIn;
    
        [DataMember]
        public string ProvDomLeIn
        {
            get { return _provDomLeIn; }
            set
            {
                if (_provDomLeIn != value)
                {
                    _provDomLeIn = value;
                    OnPropertyChanged("ProvDomLeIn");
                }
            }
        }
        private string _provDomLeIn;
    
        [DataMember]
        public string ProvTeleIn
        {
            get { return _provTeleIn; }
            set
            {
                if (_provTeleIn != value)
                {
                    _provTeleIn = value;
                    OnPropertyChanged("ProvTeleIn");
                }
            }
        }
        private string _provTeleIn;
    
        [DataMember]
        public string ProvFaxIn
        {
            get { return _provFaxIn; }
            set
            {
                if (_provFaxIn != value)
                {
                    _provFaxIn = value;
                    OnPropertyChanged("ProvFaxIn");
                }
            }
        }
        private string _provFaxIn;
    
        [DataMember]
        public string ProvObsIn
        {
            get { return _provObsIn; }
            set
            {
                if (_provObsIn != value)
                {
                    _provObsIn = value;
                    OnPropertyChanged("ProvObsIn");
                }
            }
        }
        private string _provObsIn;
    
        [DataMember]
        public string RazonSocial
        {
            get { return _razonSocial; }
            set
            {
                if (_razonSocial != value)
                {
                    _razonSocial = value;
                    OnPropertyChanged("RazonSocial");
                }
            }
        }
        private string _razonSocial;
    
        [DataMember]
        public string Dni
        {
            get { return _dni; }
            set
            {
                if (_dni != value)
                {
                    _dni = value;
                    OnPropertyChanged("Dni");
                }
            }
        }
        private string _dni;
    
        [DataMember]
        public string Telefono
        {
            get { return _telefono; }
            set
            {
                if (_telefono != value)
                {
                    _telefono = value;
                    OnPropertyChanged("Telefono");
                }
            }
        }
        private string _telefono;
    
        [DataMember]
        public string Fax
        {
            get { return _fax; }
            set
            {
                if (_fax != value)
                {
                    _fax = value;
                    OnPropertyChanged("Fax");
                }
            }
        }
        private string _fax;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public Productores Productores
        {
            get { return _productores; }
            set
            {
                if (!ReferenceEquals(_productores, value))
                {
                    var previousValue = _productores;
                    _productores = value;
                    FixupProductores(previousValue);
                    OnNavigationPropertyChanged("Productores");
                }
            }
        }
        private Productores _productores;
    
        [DataMember]
        public TrackableCollection<Productos> Productos
        {
            get
            {
                if (_productos == null)
                {
                    _productos = new TrackableCollection<Productos>();
                    _productos.CollectionChanged += FixupProductos;
                }
                return _productos;
            }
            set
            {
                if (!ReferenceEquals(_productos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_productos != null)
                    {
                        _productos.CollectionChanged -= FixupProductos;
                    }
                    _productos = value;
                    if (_productos != null)
                    {
                        _productos.CollectionChanged += FixupProductos;
                    }
                    OnNavigationPropertyChanged("Productos");
                }
            }
        }
        private TrackableCollection<Productos> _productos;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Productores = null;
            Productos.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupProductores(Productores previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProveedoresMatInerte.Contains(this))
            {
                previousValue.ProveedoresMatInerte.Remove(this);
            }
    
            if (Productores != null)
            {
                if (!Productores.ProveedoresMatInerte.Contains(this))
                {
                    Productores.ProveedoresMatInerte.Add(this);
                }
    
                ren = Productores.ren;
            }
            else if (!skipKeys)
            {
                ren = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Productores")
                    && (ChangeTracker.OriginalValues["Productores"] == Productores))
                {
                    ChangeTracker.OriginalValues.Remove("Productores");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Productores", previousValue);
                }
                if (Productores != null && !Productores.ChangeTracker.ChangeTrackingEnabled)
                {
                    Productores.StartTracking();
                }
            }
        }
    
        private void FixupProductos(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Productos item in e.NewItems)
                {
                    if (!item.ProveedoresMatInerte.Contains(this))
                    {
                        item.ProveedoresMatInerte.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Productos", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Productos item in e.OldItems)
                {
                    if (item.ProveedoresMatInerte.Contains(this))
                    {
                        item.ProveedoresMatInerte.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Productos", item);
                    }
                }
            }
        }

        #endregion
    }
}
