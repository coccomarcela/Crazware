//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Apiarios))]
    [KnownType(typeof(ControlSanitario))]
    [KnownType(typeof(ProductosProvVivo))]
    public partial class ProveedoresMatVivo: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int NroRegistroVivo
        {
            get { return _nroRegistroVivo; }
            set
            {
                if (_nroRegistroVivo != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'NroRegistroVivo' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _nroRegistroVivo = value;
                    OnPropertyChanged("NroRegistroVivo");
                }
            }
        }
        private int _nroRegistroVivo;
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    ChangeTracker.RecordOriginalValue("ren", _ren);
                    if (!IsDeserializing)
                    {
                        if (Apiarios != null && Apiarios.ren != value)
                        {
                            var previousValue = _apiarios;
                            _apiarios = null;
                            FixupApiarios(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("Apiarios");
                        }
                    }
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public Nullable<int> NroApiario
        {
            get { return _nroApiario; }
            set
            {
                if (_nroApiario != value)
                {
                    ChangeTracker.RecordOriginalValue("NroApiario", _nroApiario);
                    if (!IsDeserializing)
                    {
                        if (Apiarios != null && Apiarios.NroApiario != value)
                        {
                            var previousValue = _apiarios;
                            _apiarios = null;
                            FixupApiarios(previousValue, skipKeys: true);
                            OnNavigationPropertyChanged("Apiarios");
                        }
                    }
                    _nroApiario = value;
                    OnPropertyChanged("NroApiario");
                }
            }
        }
        private Nullable<int> _nroApiario;
    
        [DataMember]
        public string ProvObsVivo
        {
            get { return _provObsVivo; }
            set
            {
                if (_provObsVivo != value)
                {
                    _provObsVivo = value;
                    OnPropertyChanged("ProvObsVivo");
                }
            }
        }
        private string _provObsVivo;
    
        [DataMember]
        public string Domicilio
        {
            get { return _domicilio; }
            set
            {
                if (_domicilio != value)
                {
                    _domicilio = value;
                    OnPropertyChanged("Domicilio");
                }
            }
        }
        private string _domicilio;
    
        [DataMember]
        public string Correo_Eletronico
        {
            get { return _correo_Eletronico; }
            set
            {
                if (_correo_Eletronico != value)
                {
                    _correo_Eletronico = value;
                    OnPropertyChanged("Correo_Eletronico");
                }
            }
        }
        private string _correo_Eletronico;
    
        [DataMember]
        public string Telefono
        {
            get { return _telefono; }
            set
            {
                if (_telefono != value)
                {
                    _telefono = value;
                    OnPropertyChanged("Telefono");
                }
            }
        }
        private string _telefono;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public Apiarios Apiarios
        {
            get { return _apiarios; }
            set
            {
                if (!ReferenceEquals(_apiarios, value))
                {
                    var previousValue = _apiarios;
                    _apiarios = value;
                    FixupApiarios(previousValue);
                    OnNavigationPropertyChanged("Apiarios");
                }
            }
        }
        private Apiarios _apiarios;
    
        [DataMember]
        public TrackableCollection<ControlSanitario> ControlSanitario
        {
            get
            {
                if (_controlSanitario == null)
                {
                    _controlSanitario = new TrackableCollection<ControlSanitario>();
                    _controlSanitario.CollectionChanged += FixupControlSanitario;
                }
                return _controlSanitario;
            }
            set
            {
                if (!ReferenceEquals(_controlSanitario, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_controlSanitario != null)
                    {
                        _controlSanitario.CollectionChanged -= FixupControlSanitario;
                    }
                    _controlSanitario = value;
                    if (_controlSanitario != null)
                    {
                        _controlSanitario.CollectionChanged += FixupControlSanitario;
                    }
                    OnNavigationPropertyChanged("ControlSanitario");
                }
            }
        }
        private TrackableCollection<ControlSanitario> _controlSanitario;
    
        [DataMember]
        public TrackableCollection<ProductosProvVivo> ProductosProvVivo
        {
            get
            {
                if (_productosProvVivo == null)
                {
                    _productosProvVivo = new TrackableCollection<ProductosProvVivo>();
                    _productosProvVivo.CollectionChanged += FixupProductosProvVivo;
                }
                return _productosProvVivo;
            }
            set
            {
                if (!ReferenceEquals(_productosProvVivo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_productosProvVivo != null)
                    {
                        _productosProvVivo.CollectionChanged -= FixupProductosProvVivo;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Quitar el controlador de eventos de eliminación en cascada para aquellas entidades de la colección actual.
                        foreach (ProductosProvVivo item in _productosProvVivo)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _productosProvVivo = value;
                    if (_productosProvVivo != null)
                    {
                        _productosProvVivo.CollectionChanged += FixupProductosProvVivo;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                        foreach (ProductosProvVivo item in _productosProvVivo)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ProductosProvVivo");
                }
            }
        }
        private TrackableCollection<ProductosProvVivo> _productosProvVivo;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Apiarios = null;
            ControlSanitario.Clear();
            ProductosProvVivo.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupApiarios(Apiarios previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ProveedoresMatVivo.Contains(this))
            {
                previousValue.ProveedoresMatVivo.Remove(this);
            }
    
            if (Apiarios != null)
            {
                if (!Apiarios.ProveedoresMatVivo.Contains(this))
                {
                    Apiarios.ProveedoresMatVivo.Add(this);
                }
    
                ren = Apiarios.ren;
                NroApiario = Apiarios.NroApiario;
            }
            else if (!skipKeys)
            {
                ren = null;
                NroApiario = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Apiarios")
                    && (ChangeTracker.OriginalValues["Apiarios"] == Apiarios))
                {
                    ChangeTracker.OriginalValues.Remove("Apiarios");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Apiarios", previousValue);
                }
                if (Apiarios != null && !Apiarios.ChangeTracker.ChangeTrackingEnabled)
                {
                    Apiarios.StartTracking();
                }
            }
        }
    
        private void FixupControlSanitario(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ControlSanitario item in e.NewItems)
                {
                    item.ProveedoresMatVivo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ControlSanitario", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ControlSanitario item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProveedoresMatVivo, this))
                    {
                        item.ProveedoresMatVivo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ControlSanitario", item);
                    }
                }
            }
        }
    
        private void FixupProductosProvVivo(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ProductosProvVivo item in e.NewItems)
                {
                    item.ProveedoresMatVivo = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ProductosProvVivo", item);
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ProductosProvVivo item in e.OldItems)
                {
                    if (ReferenceEquals(item.ProveedoresMatVivo, this))
                    {
                        item.ProveedoresMatVivo = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ProductosProvVivo", item);
                        // Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                        // permite que la relación se modifique sin eliminar el elemento dependiente.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Quitar el extremo dependiente anterior de la escucha de eventos.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
