//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Compradores))]
    [KnownType(typeof(Grupos))]
    [KnownType(typeof(Productores))]
    [KnownType(typeof(Productos))]
    public partial class FormasComercializacion: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ren' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Productores != null && Productores.ren != value)
                        {
                            Productores = null;
                        }
                    }
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public int CodProd
        {
            get { return _codProd; }
            set
            {
                if (_codProd != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'CodProd' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (Productos != null && Productos.CodProd != value)
                        {
                            Productos = null;
                        }
                    }
                    _codProd = value;
                    OnPropertyChanged("CodProd");
                }
            }
        }
        private int _codProd;
    
        [DataMember]
        public Nullable<int> CodComprador
        {
            get { return _codComprador; }
            set
            {
                if (_codComprador != value)
                {
                    ChangeTracker.RecordOriginalValue("CodComprador", _codComprador);
                    if (!IsDeserializing)
                    {
                        if (Compradores != null && Compradores.CodComprador != value)
                        {
                            Compradores = null;
                        }
                    }
                    _codComprador = value;
                    OnPropertyChanged("CodComprador");
                }
            }
        }
        private Nullable<int> _codComprador;
    
        [DataMember]
        public Nullable<int> CodGrupo
        {
            get { return _codGrupo; }
            set
            {
                if (_codGrupo != value)
                {
                    ChangeTracker.RecordOriginalValue("CodGrupo", _codGrupo);
                    if (!IsDeserializing)
                    {
                        if (Grupos != null && Grupos.CodGrupo != value)
                        {
                            Grupos = null;
                        }
                    }
                    _codGrupo = value;
                    OnPropertyChanged("CodGrupo");
                }
            }
        }
        private Nullable<int> _codGrupo;
    
        [DataMember]
        public Nullable<bool> Directa
        {
            get { return _directa; }
            set
            {
                if (_directa != value)
                {
                    _directa = value;
                    OnPropertyChanged("Directa");
                }
            }
        }
        private Nullable<bool> _directa;
    
        [DataMember]
        public Nullable<bool> Otras
        {
            get { return _otras; }
            set
            {
                if (_otras != value)
                {
                    _otras = value;
                    OnPropertyChanged("Otras");
                }
            }
        }
        private Nullable<bool> _otras;
    
        [DataMember]
        public Nullable<bool> Comprador
        {
            get { return _comprador; }
            set
            {
                if (_comprador != value)
                {
                    _comprador = value;
                    OnPropertyChanged("Comprador");
                }
            }
        }
        private Nullable<bool> _comprador;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public Compradores Compradores
        {
            get { return _compradores; }
            set
            {
                if (!ReferenceEquals(_compradores, value))
                {
                    var previousValue = _compradores;
                    _compradores = value;
                    FixupCompradores(previousValue);
                    OnNavigationPropertyChanged("Compradores");
                }
            }
        }
        private Compradores _compradores;
    
        [DataMember]
        public Grupos Grupos
        {
            get { return _grupos; }
            set
            {
                if (!ReferenceEquals(_grupos, value))
                {
                    var previousValue = _grupos;
                    _grupos = value;
                    FixupGrupos(previousValue);
                    OnNavigationPropertyChanged("Grupos");
                }
            }
        }
        private Grupos _grupos;
    
        [DataMember]
        public Productores Productores
        {
            get { return _productores; }
            set
            {
                if (!ReferenceEquals(_productores, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                        // de lo contrario, solo se puede establecer en una entidad con la clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                        if (ren != value.ren)
                        {
                            throw new InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado de agregado.");
                        }
                    }
                    var previousValue = _productores;
                    _productores = value;
                    FixupProductores(previousValue);
                    OnNavigationPropertyChanged("Productores");
                }
            }
        }
        private Productores _productores;
    
        [DataMember]
        public Productos Productos
        {
            get { return _productos; }
            set
            {
                if (!ReferenceEquals(_productos, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                        // de lo contrario, solo se puede establecer en una entidad con la clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                        if (CodProd != value.CodProd)
                        {
                            throw new InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado de agregado.");
                        }
                    }
                    var previousValue = _productos;
                    _productos = value;
                    FixupProductos(previousValue);
                    OnNavigationPropertyChanged("Productos");
                }
            }
        }
        private Productos _productos;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
        // Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Compradores = null;
            Grupos = null;
            Productores = null;
            Productos = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupCompradores(Compradores previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FormasComercializacion.Contains(this))
            {
                previousValue.FormasComercializacion.Remove(this);
            }
    
            if (Compradores != null)
            {
                if (!Compradores.FormasComercializacion.Contains(this))
                {
                    Compradores.FormasComercializacion.Add(this);
                }
    
                CodComprador = Compradores.CodComprador;
            }
            else if (!skipKeys)
            {
                CodComprador = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Compradores")
                    && (ChangeTracker.OriginalValues["Compradores"] == Compradores))
                {
                    ChangeTracker.OriginalValues.Remove("Compradores");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Compradores", previousValue);
                }
                if (Compradores != null && !Compradores.ChangeTracker.ChangeTrackingEnabled)
                {
                    Compradores.StartTracking();
                }
            }
        }
    
        private void FixupGrupos(Grupos previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FormasComercializacion.Contains(this))
            {
                previousValue.FormasComercializacion.Remove(this);
            }
    
            if (Grupos != null)
            {
                if (!Grupos.FormasComercializacion.Contains(this))
                {
                    Grupos.FormasComercializacion.Add(this);
                }
    
                CodGrupo = Grupos.CodGrupo;
            }
            else if (!skipKeys)
            {
                CodGrupo = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Grupos")
                    && (ChangeTracker.OriginalValues["Grupos"] == Grupos))
                {
                    ChangeTracker.OriginalValues.Remove("Grupos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Grupos", previousValue);
                }
                if (Grupos != null && !Grupos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Grupos.StartTracking();
                }
            }
        }
    
        private void FixupProductores(Productores previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FormasComercializacion.Contains(this))
            {
                previousValue.FormasComercializacion.Remove(this);
            }
    
            if (Productores != null)
            {
                if (!Productores.FormasComercializacion.Contains(this))
                {
                    Productores.FormasComercializacion.Add(this);
                }
    
                ren = Productores.ren;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Productores")
                    && (ChangeTracker.OriginalValues["Productores"] == Productores))
                {
                    ChangeTracker.OriginalValues.Remove("Productores");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Productores", previousValue);
                }
                if (Productores != null && !Productores.ChangeTracker.ChangeTrackingEnabled)
                {
                    Productores.StartTracking();
                }
            }
        }
    
        private void FixupProductos(Productos previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.FormasComercializacion.Contains(this))
            {
                previousValue.FormasComercializacion.Remove(this);
            }
    
            if (Productos != null)
            {
                if (!Productos.FormasComercializacion.Contains(this))
                {
                    Productos.FormasComercializacion.Add(this);
                }
    
                CodProd = Productos.CodProd;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Productos")
                    && (ChangeTracker.OriginalValues["Productos"] == Productos))
                {
                    ChangeTracker.OriginalValues.Remove("Productos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Productos", previousValue);
                }
                if (Productos != null && !Productos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Productos.StartTracking();
                }
            }
        }

        #endregion
    }
}
