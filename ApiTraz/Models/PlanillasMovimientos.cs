//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(PlanillaCampo))]
    [KnownType(typeof(Productos))]
    public partial class PlanillasMovimientos: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public string ren
        {
            get { return _ren; }
            set
            {
                if (_ren != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'ren' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PlanillaCampo != null && PlanillaCampo.ren != value)
                        {
                            PlanillaCampo = null;
                        }
                    }
                    _ren = value;
                    OnPropertyChanged("ren");
                }
            }
        }
        private string _ren;
    
        [DataMember]
        public int NroApiario
        {
            get { return _nroApiario; }
            set
            {
                if (_nroApiario != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'NroApiario' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PlanillaCampo != null && PlanillaCampo.NroApiario != value)
                        {
                            PlanillaCampo = null;
                        }
                    }
                    _nroApiario = value;
                    OnPropertyChanged("NroApiario");
                }
            }
        }
        private int _nroApiario;
    
        [DataMember]
        public int AñoInicio
        {
            get { return _añoInicio; }
            set
            {
                if (_añoInicio != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'AñoInicio' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PlanillaCampo != null && PlanillaCampo.AñoInicio != value)
                        {
                            PlanillaCampo = null;
                        }
                    }
                    _añoInicio = value;
                    OnPropertyChanged("AñoInicio");
                }
            }
        }
        private int _añoInicio;
    
        [DataMember]
        public int AñoFin
        {
            get { return _añoFin; }
            set
            {
                if (_añoFin != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'AñoFin' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (PlanillaCampo != null && PlanillaCampo.AñoFin != value)
                        {
                            PlanillaCampo = null;
                        }
                    }
                    _añoFin = value;
                    OnPropertyChanged("AñoFin");
                }
            }
        }
        private int _añoFin;
    
        [DataMember]
        public int CodItem
        {
            get { return _codItem; }
            set
            {
                if (_codItem != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'CodItem' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _codItem = value;
                    OnPropertyChanged("CodItem");
                }
            }
        }
        private int _codItem;
    
        [DataMember]
        public Nullable<System.DateTime> PlFecha
        {
            get { return _plFecha; }
            set
            {
                if (_plFecha != value)
                {
                    _plFecha = value;
                    OnPropertyChanged("PlFecha");
                }
            }
        }
        private Nullable<System.DateTime> _plFecha;
    
        [DataMember]
        public Nullable<int> PlNucleo
        {
            get { return _plNucleo; }
            set
            {
                if (_plNucleo != value)
                {
                    _plNucleo = value;
                    OnPropertyChanged("PlNucleo");
                }
            }
        }
        private Nullable<int> _plNucleo;
    
        [DataMember]
        public Nullable<int> PlColmenas
        {
            get { return _plColmenas; }
            set
            {
                if (_plColmenas != value)
                {
                    _plColmenas = value;
                    OnPropertyChanged("PlColmenas");
                }
            }
        }
        private Nullable<int> _plColmenas;
    
        [DataMember]
        public string PlTipoAlimento
        {
            get { return _plTipoAlimento; }
            set
            {
                if (_plTipoAlimento != value)
                {
                    _plTipoAlimento = value;
                    OnPropertyChanged("PlTipoAlimento");
                }
            }
        }
        private string _plTipoAlimento;
    
        [DataMember]
        public Nullable<int> PlCantColmenas
        {
            get { return _plCantColmenas; }
            set
            {
                if (_plCantColmenas != value)
                {
                    _plCantColmenas = value;
                    OnPropertyChanged("PlCantColmenas");
                }
            }
        }
        private Nullable<int> _plCantColmenas;
    
        [DataMember]
        public Nullable<int> CodProd
        {
            get { return _codProd; }
            set
            {
                if (_codProd != value)
                {
                    ChangeTracker.RecordOriginalValue("CodProd", _codProd);
                    if (!IsDeserializing)
                    {
                        if (Productos != null && Productos.CodProd != value)
                        {
                            Productos = null;
                        }
                    }
                    _codProd = value;
                    OnPropertyChanged("CodProd");
                }
            }
        }
        private Nullable<int> _codProd;
    
        [DataMember]
        public string PlDosis
        {
            get { return _plDosis; }
            set
            {
                if (_plDosis != value)
                {
                    _plDosis = value;
                    OnPropertyChanged("PlDosis");
                }
            }
        }
        private string _plDosis;
    
        [DataMember]
        public string PlTipoMultipl
        {
            get { return _plTipoMultipl; }
            set
            {
                if (_plTipoMultipl != value)
                {
                    _plTipoMultipl = value;
                    OnPropertyChanged("PlTipoMultipl");
                }
            }
        }
        private string _plTipoMultipl;
    
        [DataMember]
        public Nullable<int> PlCantMultipl
        {
            get { return _plCantMultipl; }
            set
            {
                if (_plCantMultipl != value)
                {
                    _plCantMultipl = value;
                    OnPropertyChanged("PlCantMultipl");
                }
            }
        }
        private Nullable<int> _plCantMultipl;
    
        [DataMember]
        public string PlOrigenDest
        {
            get { return _plOrigenDest; }
            set
            {
                if (_plOrigenDest != value)
                {
                    _plOrigenDest = value;
                    OnPropertyChanged("PlOrigenDest");
                }
            }
        }
        private string _plOrigenDest;
    
        [DataMember]
        public Nullable<int> PlMediasAlzas
        {
            get { return _plMediasAlzas; }
            set
            {
                if (_plMediasAlzas != value)
                {
                    _plMediasAlzas = value;
                    OnPropertyChanged("PlMediasAlzas");
                }
            }
        }
        private Nullable<int> _plMediasAlzas;
    
        [DataMember]
        public Nullable<int> PlReinas
        {
            get { return _plReinas; }
            set
            {
                if (_plReinas != value)
                {
                    _plReinas = value;
                    OnPropertyChanged("PlReinas");
                }
            }
        }
        private Nullable<int> _plReinas;
    
        [DataMember]
        public Nullable<int> PlCantMediaAlza
        {
            get { return _plCantMediaAlza; }
            set
            {
                if (_plCantMediaAlza != value)
                {
                    _plCantMediaAlza = value;
                    OnPropertyChanged("PlCantMediaAlza");
                }
            }
        }
        private Nullable<int> _plCantMediaAlza;
    
        [DataMember]
        public Nullable<double> SEKgsNetos
        {
            get { return _sEKgsNetos; }
            set
            {
                if (_sEKgsNetos != value)
                {
                    _sEKgsNetos = value;
                    OnPropertyChanged("SEKgsNetos");
                }
            }
        }
        private Nullable<double> _sEKgsNetos;
    
        [DataMember]
        public string SEobs
        {
            get { return _sEobs; }
            set
            {
                if (_sEobs != value)
                {
                    _sEobs = value;
                    OnPropertyChanged("SEobs");
                }
            }
        }
        private string _sEobs;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public PlanillaCampo PlanillaCampo
        {
            get { return _planillaCampo; }
            set
            {
                if (!ReferenceEquals(_planillaCampo, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                        // de lo contrario, solo se puede establecer en una entidad con la clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                        if (ren != value.ren || NroApiario != value.NroApiario || AñoInicio != value.AñoInicio || AñoFin != value.AñoFin)
                        {
                            throw new InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado de agregado.");
                        }
                    }
                    var previousValue = _planillaCampo;
                    _planillaCampo = value;
                    FixupPlanillaCampo(previousValue);
                    OnNavigationPropertyChanged("PlanillaCampo");
                }
            }
        }
        private PlanillaCampo _planillaCampo;
    
        [DataMember]
        public Productos Productos
        {
            get { return _productos; }
            set
            {
                if (!ReferenceEquals(_productos, value))
                {
                    var previousValue = _productos;
                    _productos = value;
                    FixupProductos(previousValue);
                    OnNavigationPropertyChanged("Productos");
                }
            }
        }
        private Productos _productos;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
        // Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            PlanillaCampo = null;
            Productos = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupPlanillaCampo(PlanillaCampo previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PlanillasMovimientos.Contains(this))
            {
                previousValue.PlanillasMovimientos.Remove(this);
            }
    
            if (PlanillaCampo != null)
            {
                if (!PlanillaCampo.PlanillasMovimientos.Contains(this))
                {
                    PlanillaCampo.PlanillasMovimientos.Add(this);
                }
    
                ren = PlanillaCampo.ren;
                NroApiario = PlanillaCampo.NroApiario;
                AñoInicio = PlanillaCampo.AñoInicio;
                AñoFin = PlanillaCampo.AñoFin;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("PlanillaCampo")
                    && (ChangeTracker.OriginalValues["PlanillaCampo"] == PlanillaCampo))
                {
                    ChangeTracker.OriginalValues.Remove("PlanillaCampo");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("PlanillaCampo", previousValue);
                }
                if (PlanillaCampo != null && !PlanillaCampo.ChangeTracker.ChangeTrackingEnabled)
                {
                    PlanillaCampo.StartTracking();
                }
            }
        }
    
        private void FixupProductos(Productos previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.PlanillasMovimientos.Contains(this))
            {
                previousValue.PlanillasMovimientos.Remove(this);
            }
    
            if (Productos != null)
            {
                if (!Productos.PlanillasMovimientos.Contains(this))
                {
                    Productos.PlanillasMovimientos.Add(this);
                }
    
                CodProd = Productos.CodProd;
            }
            else if (!skipKeys)
            {
                CodProd = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Productos")
                    && (ChangeTracker.OriginalValues["Productos"] == Productos))
                {
                    ChangeTracker.OriginalValues.Remove("Productos");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Productos", previousValue);
                }
                if (Productos != null && !Productos.ChangeTracker.ChangeTrackingEnabled)
                {
                    Productos.StartTracking();
                }
            }
        }

        #endregion
    }
}
