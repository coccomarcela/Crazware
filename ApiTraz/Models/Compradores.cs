//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(FormasComercializacion))]
    public partial class Compradores: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int CodComprador
        {
            get { return _codComprador; }
            set
            {
                if (_codComprador != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'CodComprador' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _codComprador = value;
                    OnPropertyChanged("CodComprador");
                }
            }
        }
        private int _codComprador;
    
        [DataMember]
        public string Apellido
        {
            get { return _apellido; }
            set
            {
                if (_apellido != value)
                {
                    _apellido = value;
                    OnPropertyChanged("Apellido");
                }
            }
        }
        private string _apellido;
    
        [DataMember]
        public string Nombre
        {
            get { return _nombre; }
            set
            {
                if (_nombre != value)
                {
                    _nombre = value;
                    OnPropertyChanged("Nombre");
                }
            }
        }
        private string _nombre;
    
        [DataMember]
        public string CompDir
        {
            get { return _compDir; }
            set
            {
                if (_compDir != value)
                {
                    _compDir = value;
                    OnPropertyChanged("CompDir");
                }
            }
        }
        private string _compDir;
    
        [DataMember]
        public string CompTel
        {
            get { return _compTel; }
            set
            {
                if (_compTel != value)
                {
                    _compTel = value;
                    OnPropertyChanged("CompTel");
                }
            }
        }
        private string _compTel;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<FormasComercializacion> FormasComercializacion
        {
            get
            {
                if (_formasComercializacion == null)
                {
                    _formasComercializacion = new TrackableCollection<FormasComercializacion>();
                    _formasComercializacion.CollectionChanged += FixupFormasComercializacion;
                }
                return _formasComercializacion;
            }
            set
            {
                if (!ReferenceEquals(_formasComercializacion, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_formasComercializacion != null)
                    {
                        _formasComercializacion.CollectionChanged -= FixupFormasComercializacion;
                    }
                    _formasComercializacion = value;
                    if (_formasComercializacion != null)
                    {
                        _formasComercializacion.CollectionChanged += FixupFormasComercializacion;
                    }
                    OnNavigationPropertyChanged("FormasComercializacion");
                }
            }
        }
        private TrackableCollection<FormasComercializacion> _formasComercializacion;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            FormasComercializacion.Clear();
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupFormasComercializacion(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (FormasComercializacion item in e.NewItems)
                {
                    item.Compradores = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("FormasComercializacion", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (FormasComercializacion item in e.OldItems)
                {
                    if (ReferenceEquals(item.Compradores, this))
                    {
                        item.Compradores = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("FormasComercializacion", item);
                    }
                }
            }
        }

        #endregion
    }
}
