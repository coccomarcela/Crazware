//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios en este archivo pueden ocasionar un comportamiento incorrecto y se perderán si
//     el código se vuelve a generar.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace ApiTraz.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SalaProcFraccMovimientoDel))]
    [KnownType(typeof(SalasProcFracc))]
    public partial class SalaProcYFraccMovimiento: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Propiedades primitivas
    
        [DataMember]
        public int NroEstablecimiento
        {
            get { return _nroEstablecimiento; }
            set
            {
                if (_nroEstablecimiento != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'NroEstablecimiento' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    if (!IsDeserializing)
                    {
                        if (SalasProcFracc != null && SalasProcFracc.NroEstablecimiento != value)
                        {
                            SalasProcFracc = null;
                        }
                    }
                    _nroEstablecimiento = value;
                    OnPropertyChanged("NroEstablecimiento");
                }
            }
        }
        private int _nroEstablecimiento;
    
        [DataMember]
        public int Año
        {
            get { return _año; }
            set
            {
                if (_año != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'Año' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _año = value;
                    OnPropertyChanged("Año");
                }
            }
        }
        private int _año;
    
        [DataMember]
        public int Mes
        {
            get { return _mes; }
            set
            {
                if (_mes != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("La propiedad 'Mes' forma parte de la clave del objeto y no se puede modificar. Solo se pueden realizar cambios en las propiedades de clave cuando no se realiza un seguimiento del objeto o su estado es Agregado.");
                    }
                    _mes = value;
                    OnPropertyChanged("Mes");
                }
            }
        }
        private int _mes;

        #endregion
        #region Propiedades de navegación
    
        [DataMember]
        public TrackableCollection<SalaProcFraccMovimientoDel> SalaProcFraccMovimientoDel
        {
            get
            {
                if (_salaProcFraccMovimientoDel == null)
                {
                    _salaProcFraccMovimientoDel = new TrackableCollection<SalaProcFraccMovimientoDel>();
                    _salaProcFraccMovimientoDel.CollectionChanged += FixupSalaProcFraccMovimientoDel;
                }
                return _salaProcFraccMovimientoDel;
            }
            set
            {
                if (!ReferenceEquals(_salaProcFraccMovimientoDel, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("No se puede establecer el elemento FixupChangeTrackingCollection cuando se ha habilitado ChangeTracking");
                    }
                    if (_salaProcFraccMovimientoDel != null)
                    {
                        _salaProcFraccMovimientoDel.CollectionChanged -= FixupSalaProcFraccMovimientoDel;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Quitar el controlador de eventos de eliminación en cascada para aquellas entidades de la colección actual.
                        foreach (SalaProcFraccMovimientoDel item in _salaProcFraccMovimientoDel)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _salaProcFraccMovimientoDel = value;
                    if (_salaProcFraccMovimientoDel != null)
                    {
                        _salaProcFraccMovimientoDel.CollectionChanged += FixupSalaProcFraccMovimientoDel;
                        // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                        // Agrega el controlador de eventos de eliminación en cascada para aquellas entidades que ya se encuentran en la nueva colección.
                        foreach (SalaProcFraccMovimientoDel item in _salaProcFraccMovimientoDel)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("SalaProcFraccMovimientoDel");
                }
            }
        }
        private TrackableCollection<SalaProcFraccMovimientoDel> _salaProcFraccMovimientoDel;
    
        [DataMember]
        public SalasProcFracc SalasProcFracc
        {
            get { return _salasProcFracc; }
            set
            {
                if (!ReferenceEquals(_salasProcFracc, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added && value != null)
                    {
                        // Este es el extremo dependiente de una relación de identificación por lo que el extremo principal no se puede cambiar si ya está establecido;
                        // de lo contrario, solo se puede establecer en una entidad con la clave primaria que tenga el mismo valor que la clave externa del extremo dependiente.
                        if (NroEstablecimiento != value.NroEstablecimiento)
                        {
                            throw new InvalidOperationException("El extremo principal de una relación de identificación solo se puede modificar cuando el extremo dependiente se encuentra en el estado de agregado.");
                        }
                    }
                    var previousValue = _salasProcFracc;
                    _salasProcFracc = value;
                    FixupSalasProcFracc(previousValue);
                    OnNavigationPropertyChanged("SalasProcFracc");
                }
            }
        }
        private SalasProcFracc _salasProcFracc;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Este tipo de entidad es el extremo dependiente en al menos una asociación que realiza eliminaciones en cascada.
        // Este controlador de eventos procesará notificaciones que tienen lugar cuando se elimina el extremo principal.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SalaProcFraccMovimientoDel.Clear();
            SalasProcFracc = null;
        }

        #endregion
        #region Corrección de asociación
    
        private void FixupSalasProcFracc(SalasProcFracc previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SalaProcYFraccMovimiento.Contains(this))
            {
                previousValue.SalaProcYFraccMovimiento.Remove(this);
            }
    
            if (SalasProcFracc != null)
            {
                if (!SalasProcFracc.SalaProcYFraccMovimiento.Contains(this))
                {
                    SalasProcFracc.SalaProcYFraccMovimiento.Add(this);
                }
    
                NroEstablecimiento = SalasProcFracc.NroEstablecimiento;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SalasProcFracc")
                    && (ChangeTracker.OriginalValues["SalasProcFracc"] == SalasProcFracc))
                {
                    ChangeTracker.OriginalValues.Remove("SalasProcFracc");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SalasProcFracc", previousValue);
                }
                if (SalasProcFracc != null && !SalasProcFracc.ChangeTracker.ChangeTrackingEnabled)
                {
                    SalasProcFracc.StartTracking();
                }
            }
        }
    
        private void FixupSalaProcFraccMovimientoDel(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SalaProcFraccMovimientoDel item in e.NewItems)
                {
                    item.SalaProcYFraccMovimiento = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SalaProcFraccMovimientoDel", item);
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Actualizar la escucha de eventos para que se refiera al nuevo extremo dependiente.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SalaProcFraccMovimientoDel item in e.OldItems)
                {
                    if (ReferenceEquals(item.SalaProcYFraccMovimiento, this))
                    {
                        item.SalaProcYFraccMovimiento = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SalaProcFraccMovimientoDel", item);
                        // Eliminar el extremo dependiente de esta asociación de identificación. Si el estado actual es agregado,
                        // permite que la relación se modifique sin eliminar el elemento dependiente.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Este es el extremo principal en una asociación que realiza eliminaciones en cascada.
                    // Quitar el extremo dependiente anterior de la escucha de eventos.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion
    }
}
